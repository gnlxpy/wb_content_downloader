import asyncio
import os
from concurrent.futures import ThreadPoolExecutor
from aiogram import Bot, Dispatcher
from aiogram.types import Message, InputMediaVideo
from aiogram.types.input_file import FSInputFile
from aiogram.filters import CommandStart
from dotenv import load_dotenv
from common import delete_files
from parse import main_parsing_task


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TG_TOKEN')
URL_PART_LIST = ['wildberries', 'catalog', 'feedbacks', 'https://']


# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
# –∑–∞–ø—É—Å–∫ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
executor = ThreadPoolExecutor(max_workers=3)
request_queue = asyncio.Queue()


async def background_task():
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    """
    while True:
        user_id, message = await request_queue.get()
        print('–ó–∞–¥–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ', user_id, message)
        # –ó–∞–ø—É—Å–∫–∞–µ–º sync –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_running_loop()
        result = await loop.run_in_executor(executor, main_parsing_task, message)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await send_response(user_id, result)


@dp.message(CommandStart())
async def start(message: Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã \n"
                         "–Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –±—ã—Å—Ç—Ä–æ –≤–∏–¥–µ–æ –æ—Ç–∑—ã–≤—ã —Å —Å–∞–π—Ç–∞ WB\n"
                         "–î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∑—ã–≤–æ–≤\n"
                         "–ü—Ä–∏—Å—Ç—É–ø–∏–º? ü§ñ")


async def send_response(user_id: int, result: dict | bool) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    :param user_id: —é–∑–µ—Ä –∞–π–¥–∏
    :param result: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–±–æ—Ä–∞
    """
    print('user_id', user_id, 'result', result)
    if result is dict and len(result['grouped_files']) > 0:
        await bot.send_message(chat_id=user_id, text=f"‚úÖ–ë—ã–ª–∏ —Å–∫–∞—á–∞–Ω—ã {result['sum_files']} —Ñ–∞–π–ª–æ–≤\n"
                                                     f"–§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ {result['lost_files']}\n"
                                                     f"–ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {result['errors_url']}\n"
                                                     f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ - {result['large_files']}\n"
                                                     f"–ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤...")
        # –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ —Å —Ñ–∞–π–ª–∞–º–∏
        for _list in result['grouped_files']:
            media = []
            for file in _list:
                media.append(InputMediaVideo(media=FSInputFile(f'./downloads/{file}')))
            await bot.send_media_group(chat_id=user_id, media=media)
        # —É–¥–∞–ª–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        await delete_files(result['grouped_files'], './downloads/')
    if result is None:
        await bot.send_message(user_id, "‚õîÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –±–æ–ª–µ–µ 100 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
    else:
        await bot.send_message(user_id, "üò∞ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã")


@dp.message()
async def handle_message(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    # –ø–æ–ª—É—á–µ–Ω–∏–µ id –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    user_message = message.text
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏
    check = all(url_part in user_message for url_part in URL_PART_LIST)
    if not check or ' ' in user_message:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ üò°")
        return
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å
    await request_queue.put((user_id, user_message))
    await message.reply("üöÄ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è\n"
                        "–í —Å—Ä–µ–¥–Ω–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç")


async def main():
    """
    –ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∏ —Ç–≥ –±–æ—Ç–∞
    """
    asyncio.create_task(background_task())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
